@page "/room/infor/{id:int}"
@using BlazorBootstrap
@using asm_csharp.Data
@using MySql.Data.MySqlClient
@inject NavigationManager navigationManager
<PageTitle>Employee</PageTitle>
<h3>List of Employees</h3>
 <Button Type="ButtonType.Link" Color="ButtonColor.Primary" To="/room"><Icon Name="IconName.BoxArrowLeft"></Icon> Back</Button>
<Grid TItem="Employee"
      Class="table table-hover table-bordered table-striped"
      DataProvider="EmployeeDataProvider"
      AllowFiltering="true"


      Responsive="true">


    <GridColumn TItem="Employee" HeaderText="Name" PropertyName="Name" SortKeySelector="item => item.Name">
        @context.Name
   </GridColumn>
   <GridColumn TItem="Employee" HeaderText="User name" PropertyName="User_name" SortKeySelector="item => item.User_name">
        @context.User_name
   </GridColumn>
   <GridColumn TItem="Employee" HeaderText="Email" PropertyName="Email" SortKeySelector="item => item.Email">
        @context.Email
   </GridColumn>
   <GridColumn TItem="Employee" HeaderText="Password" PropertyName="Password" SortKeySelector="item => item.Password">
        @context.Password
   </GridColumn>
   <GridColumn TItem="Employee" HeaderText="Salary" PropertyName="Salary" SortKeySelector="item => item.Salary">
        @context.Salary
   </GridColumn>

    <GridColumn TItem="Employee" HeaderText="Image User" PropertyName="Img_user" SortKeySelector="item => item.Img_user">
        <img  src="/uploads/@context.Img_user" alt="User Image" width="200" heigh="200"/>
   </GridColumn>
  
    <GridColumn TItem="Employee" HeaderText="Status" PropertyName="Name" SortKeySelector="item => item.Is_deleted">
        @if (@context.Is_deleted == 1)
        {
                                   <Button Color="ButtonColor.Success" Disabled="true"> Active </Button>
        }
        @if (@context.Is_deleted == 0)
        {
                                   <Button Color="ButtonColor.Warning" Disabled="true"> Deleted </Button>
        }
    </GridColumn>
   

</Grid>
@code {
    [Parameter]
    public int id { get; set; }

    private List<Employee> employees;
    protected override void OnParametersSet() // Lay thong tin cu theo ID
    {
        if (id != 0)
        {
            employees = GetEmployees();
        }
    }
    

    protected override void OnInitialized()
    {
        employees = GetEmployees();
    }
    private async Task<GridDataProviderResult<Employee>> EmployeeDataProvider(GridDataProviderRequest<Employee> request)
    {
        if (employees is null) // pull employees only one time for client-side filtering, sorting, and paging
            employees = GetEmployees(); // call a service or an API to pull the employees

        return await Task.FromResult(request.ApplyTo(employees));
    }

    private  List<Employee> GetEmployees()
    {
        List<Employee> list = new List<Employee>();
        try
        {
            string sqlGetEmployees = $"SELECT employees.name , employees.user_name, employees.email , employees.`password` , employees.salary , employees.is_deleted , employees.img_user FROM employees join rooms on employees.room_id = rooms.id WHERE rooms.id= {id}";
            MySqlConnection conn = DBMySql.GetMySqlConnection();
            conn.Open();
            MySqlCommand cmd = conn.CreateCommand();
            cmd.CommandText = sqlGetEmployees;
            MySqlDataReader reader = cmd.ExecuteReader();
            while (reader.Read())
            {
                Employee c = new Employee();
                
                c.Name = reader.GetString("name");
                c.User_name = reader.GetString("user_name");
                c.Email = reader.GetString("email");
                c.Password = reader.GetString("password");
                c.Salary = reader.GetDouble("salary");
                c.Is_deleted = reader.GetInt32("is_deleted");
                c.Img_user = reader.GetString("img_user");
                
                list.Add(c);

            }
            conn.Close();

        }
        catch (Exception ex)
        {

        }
        return list;
    }
}